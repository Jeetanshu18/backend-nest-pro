name: 'Deploy to Server'

on:
  push:
    branches: ['dev']

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref_name }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Build & Deploy
      uses: appleboy/ssh-action@v1.0.3 
      env:
        REPO_NAME: ${{ github.repository }}
        BRANCH_NAME: ${{ github.ref_name }}
        BRANCH_NAME_NEW: ${{ github.ref_name^^ }}
      with:
        host: ${{ secrets.IP_ADDRESS }}
        username: ${{ secrets.SSH_USER_NAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY_NODE_DEV }}
        port: ${{ secrets.PORT }}
        envs: REPO_NAME, BRANCH_NAME
        script: |
          echo "REPO_NAME: $REPO_NAME"
          echo "branch_name: $BRANCH_NAME"
          echo "branch_name_new: $BRANCH_NAME_NEW"
          echo "GITHUB_SHA: $GITHUB_SHA"
          GITHUB_SHA="${{ github.sha }}"
          REPOS_NAME=$(echo "$REPO_NAME" | cut -d'/' -f2)
          CONTAINER_NAME="${REPOS_NAME}"
          echo "REPOS_NAME: $REPOS_NAME"
          ENV="${BRANCH_NAME}"
          if [[ ! -d "$REPOS_NAME" ]]; then
            git clone git@github.com:Jeetanshu18/backend-nest-pro.git -b "$BRANCH_NAME" "$REPOS_NAME"
            cd "$REPOS_NAME"
          else
            cd "$REPOS_NAME"
            git pull origin "$BRANCH_NAME"
          fi
          GIT_HASH=$(git rev-parse --short "$GITHUB_SHA")
          echo "GIT_HASH=$GIT_HASH"
          IMAGE_NAME="$(echo "${REPOS_NAME}:${GIT_HASH}" | tr '[:upper:]' '[:lower:]')"
          if [ $? -eq 0 ]; then
            sudo docker build --build-arg ENV="$ENV" -t "$IMAGE_NAME" .
            if [ $? -eq 0 ]; then
              if docker ps -a --format '{{.Names}}' | grep -Eq "^$CONTAINER_NAME$"; then
                echo "Stopping existing container: $CONTAINER_NAME"
                sudo docker stop "$CONTAINER_NAME" || true
                echo "Removing existing container: $CONTAINER_NAME"
                sudo docker rm "$CONTAINER_NAME" || true
              else
                echo "docker container stop failed or container not exists"
              fi  
            else
              echo "Docker build failed."
              exit 1
            fi
          else
            echo "Git operation failed."
            exit 1
          fi
          sudo docker run -d --network="$REPOS_NAME" -p 3000:3000 --name "$CONTAINER_NAME" "$IMAGE_NAME"
          sudo docker image prune -a -f || true
